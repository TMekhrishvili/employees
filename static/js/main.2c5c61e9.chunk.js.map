{"version":3,"sources":["context/GlobalStates.js","services/services.js","components/UsersTable.jsx","components/GeneralModalForm.jsx","components/CreateUpdate.jsx","components/Read.jsx","components/Delete.jsx","components/Notification.jsx","components/CrudButtons.jsx","App.js","index.js"],"names":["GlobalContext","createContext","GlobalProvider","props","useState","response","setresponse","userid","setuserid","isModalOpen","setIsModalOpen","Provider","value","children","userGet","id","url","Promise","resolve","reject","axios","get","then","catch","error","columns","title","dataIndex","UsersTable","userslist","setuserslist","useContext","useEffect","data","map","key","console","log","dataSource","size","rowSelection","type","onChange","selectedRowKeys","GeneralModalForm","header","visible","onCancel","footer","CreateUpdate","firstname","lastname","user","setuser","ref","useRef","userData","Firstname","Lastname","current","setFieldsValue","name","style","display","flexDirection","initialValues","onFinish","values","put","userUpdate","post","userSet","onFinishFailed","errorInfo","Item","rules","required","message","placeholder","htmlType","Read","setUser","Delete","className","onClick","delete","userDelete","Error","CrudButtons","settype","Notification","childForModal","danger","App","defaults","baseURL","headers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c5c61e9.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const GlobalContext = createContext();\r\n\r\nexport const GlobalProvider = (props) => {\r\n    const [response, setresponse] = useState('')\r\n    const [userid, setuserid] = useState(0)\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                response,\r\n                setresponse,\r\n                userid,\r\n                setuserid,\r\n                isModalOpen,\r\n                setIsModalOpen,\r\n            }}>\r\n            { props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import axios from 'axios'\r\n\r\nexport const fetchUsers = () => {\r\n    const url = '/'\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url)\r\n            .then(response => {\r\n                resolve(response)\r\n            })\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n\r\nexport const userSet = data => {\r\n    const url = 'add'\r\n    console.log(data)\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(url, data)\r\n            .then(response => {\r\n                resolve(response)\r\n            })\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n\r\nexport const userGet = id => {\r\n    const url = `view/${id}`\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url)\r\n            .then(response => {\r\n                resolve(response)\r\n            })\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n\r\nexport const userUpdate = data => {\r\n    const url = 'update'\r\n    return new Promise((resolve, reject) => {\r\n        axios.put(url, data)\r\n            .then(response => {\r\n                resolve(response)\r\n            })\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n\r\nexport const userDelete = id => {\r\n    const url = `delete/${id}`\r\n    return new Promise((resolve, reject) => {\r\n        axios.delete(url)\r\n            .then(response => {\r\n                resolve(response)\r\n            })\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Table } from 'antd'\r\nimport { GlobalContext } from '../context/GlobalStates'\r\nimport { fetchUsers } from '../services/services'\r\n\r\nconst columns = [\r\n    {\r\n        title: 'User N',\r\n        dataIndex: 'id',\r\n    },\r\n    {\r\n        title: 'Firstname',\r\n        dataIndex: 'Firstname',\r\n    },\r\n    {\r\n        title: 'Lastname',\r\n        dataIndex: 'Lastname',\r\n    },\r\n]\r\n\r\nconst UsersTable = () => {\r\n    const [userslist, setuserslist] = useState([])\r\n    const {\r\n        response,\r\n        setuserid\r\n    } = useContext(GlobalContext)\r\n\r\n    // useEffect\r\n    useEffect(() => {\r\n        fetchUsers()\r\n            .then(response => {\r\n                // add 'key'\r\n                setuserslist(response.data.map(value => ({ ...value, key: value.id })))\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }, [response])\r\n    return (\r\n        <Table\r\n            columns={columns}\r\n            dataSource={userslist}\r\n            size=\"small\"\r\n            rowSelection={{\r\n                type: 'radio',\r\n                onChange: (selectedRowKeys) => {\r\n                    setuserid(selectedRowKeys)\r\n                }\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default UsersTable\r\n","import React, { useContext } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { GlobalContext } from '../context/GlobalStates'\r\n\r\nconst GeneralModalForm = props => {\r\n    const { isModalOpen, setIsModalOpen } = useContext(GlobalContext)\r\n\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                header={false}\r\n                visible={isModalOpen}\r\n                onCancel={handleCancel}\r\n                footer={false}\r\n            >\r\n                {props.children}\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GeneralModalForm\r\n","import React, { useState, useContext, useEffect, useRef } from 'react'\r\nimport { Form, Input, Button } from 'antd'\r\nimport { userSet, userGet, userUpdate } from '../services/services'\r\nimport { GlobalContext } from '../context/GlobalStates'\r\n\r\nconst CreateUpdate = () => {\r\n    const [user, setuser] = useState({ firstname: null, lastname: null })\r\n    const { userid, setresponse, setIsModalOpen } = useContext(GlobalContext)\r\n    const ref = useRef(null)\r\n    const onFinish = (values) => {\r\n        if (userid > 0) {\r\n            const data = { ...values, id: userid }\r\n            userUpdate(data)\r\n                .then(response => {\r\n                    setresponse(response)\r\n                    setIsModalOpen(false)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        } else {\r\n            userSet(values)\r\n                .then(response => {\r\n                    setresponse(response)\r\n                    setIsModalOpen(false)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (userid > 0) {\r\n            userGet(userid)\r\n                .then(response => {\r\n                    const userData = { id: response.data.id, firstname: response.data.Firstname, lastname: response.data.Lastname }\r\n                    setuser(userData)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n    }, [userid])\r\n\r\n    useEffect(() => {\r\n\r\n        if (ref.current) {\r\n            if (userid === 0) {\r\n                ref.current.setFieldsValue({ firstname: \"\", lastname: \"\" })\r\n            } else {\r\n                ref.current.setFieldsValue(user)\r\n            }\r\n        }\r\n    }, [user, userid])\r\n\r\n    return (\r\n        <Form\r\n            ref={ref}\r\n            name=\"basic\"\r\n            style={{ display: 'flex', flexDirection: 'column' }}\r\n            initialValues={{\r\n                firstname: user.firstname,\r\n                lastname: user.lastname\r\n            }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n            <Form.Item\r\n                name=\"firstname\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your firstname!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input type=\"text\" placeholder=\"Firstname\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"lastname\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your Lastname!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input type=\"text\" placeholder=\"Lastname\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    SAVE\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default CreateUpdate\r\n","import React, { useState, useContext, useEffect } from 'react'\r\nimport { GlobalContext } from '../context/GlobalStates'\r\nimport { userGet } from '../services/services'\r\n\r\nconst Read = () => {\r\n    const [user, setUser] = useState({ id: 0, Firstname: '', Lastname: '' })\r\n    const { userid } = useContext(GlobalContext)\r\n\r\n    useEffect(() => {\r\n        userGet(userid)\r\n            .then(response => {\r\n                setUser(response.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }, [userid])\r\n\r\n    return (\r\n        <>\r\n            <p><strong>User N:</strong> {user.id}</p>\r\n            <p><strong>Firstname:</strong> {user.Firstname}</p>\r\n            <p><strong>Lastname:</strong> {user.Lastname}</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Read\r\n","import React, { useContext } from 'react'\r\nimport { Button } from 'antd'\r\nimport { GlobalContext } from '../context/GlobalStates'\r\nimport { userDelete } from '../services/services'\r\n\r\nconst Delete = () => {\r\n    const { userid, setuserid, setIsModalOpen, setresponse } = useContext(GlobalContext)\r\n\r\n    const handleClick = () => {\r\n        userDelete(userid)\r\n            .then(response => {\r\n                setresponse(response)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n        setIsModalOpen(false)\r\n        setuserid(0)\r\n    }\r\n\r\n    return (\r\n        <div className=\"delete-form\">\r\n            <p>Do you really want to delete selected user?</p>\r\n            <div className=\"delete-footer-buttons\">\r\n                <Button type=\"primary\" onClick={handleClick}>Yes</Button>\r\n                <Button onClick={() => setIsModalOpen(false)}>No</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Delete\r\n","import React from 'react'\r\n\r\nconst Error = () => <p>Please, Select user!</p>\r\n\r\nexport default Error","import React, { useState, useContext } from 'react'\r\nimport { Button } from 'antd'\r\nimport GeneralModalForm from './GeneralModalForm'\r\nimport CreateUpdate from './CreateUpdate'\r\nimport Read from './Read'\r\nimport { GlobalContext } from '../context/GlobalStates'\r\nimport Delete from './Delete'\r\nimport Notification from './Notification'\r\n\r\nconst CrudButtons = () => {\r\n    const [type, settype] = useState('CREATE')\r\n    const { userid, setuserid, setIsModalOpen } = useContext(GlobalContext)\r\n\r\n    const childForModal = type => {\r\n        if (type === 'CREATE' || type === 'UPDATE') return <CreateUpdate />\r\n        else if (type === 'READ') return <Read />\r\n        else if (type === 'DELETE') return <Delete />\r\n        else if (type === 'NOTIFICATION') return <Notification />\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <GeneralModalForm>\r\n                {childForModal(type)}\r\n            </GeneralModalForm>\r\n\r\n            <Button\r\n                type=\"primary\"\r\n                onClick={() => {\r\n                    setIsModalOpen(true)\r\n                    setuserid(0)\r\n                    settype('CREATE')\r\n                }}\r\n            >\r\n                Create\r\n            </Button>\r\n\r\n            <Button\r\n                onClick={() => {\r\n                    setIsModalOpen(true)\r\n                    if (userid > 0) settype('READ')\r\n                    else settype('NOTIFICATION')\r\n                }}\r\n            >\r\n                Read\r\n            </Button>\r\n\r\n            <Button\r\n                onClick={() => {\r\n                    setIsModalOpen(true)\r\n                    if (userid > 0) settype('UPDATE')\r\n                    else settype('NOTIFICATION')\r\n                }}\r\n            >\r\n                Update\r\n            </Button>\r\n\r\n            <Button\r\n                onClick={() => {\r\n                    setIsModalOpen(true)\r\n                    if (userid > 0) settype('DELETE')\r\n                    else settype('NOTIFICATION')\r\n                }}\r\n                danger\r\n            >\r\n                Delete\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CrudButtons\r\n","import React from 'react'\r\nimport { GlobalProvider } from './context/GlobalStates'\r\nimport './index.css'\r\nimport UsersTable from './components/UsersTable'\r\nimport CrudButtons from './components/CrudButtons'\r\n\r\nconst App = () => {\r\n  return (\r\n    <GlobalProvider>\r\n      <CrudButtons />\r\n      <UsersTable />\r\n    </GlobalProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport axios from 'axios'\r\n\r\naxios.defaults.baseURL = 'https://morning-ridge-50892.herokuapp.com/'\r\naxios.defaults.headers.post['Content-Type'] = 'application/json'\r\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}